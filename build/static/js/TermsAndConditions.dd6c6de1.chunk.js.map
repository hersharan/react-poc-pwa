{"version":3,"sources":["js/components/TermsAndConditions/termsAndConditions.actions.js","js/components/TermsAndConditions/TermsAndConditions.js"],"names":["config","getAuthorization","getTermsAndConditionsAction","getTermsAndConditions","language","country","dispatch","type","axios","get","concat","then","response","payload","data","catch","error","TermsAndConditions","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","preview","nid","createMarkup","bind","assertThisInitialized","getRenderTermsAndConditions","parsed","queryString","parse","location","search","setState","tnc","removeDrupalToolbar","__html","_this$props","fetchingTnc","fetchedTnc","length","react_default","a","createElement","Fragment","className","dangerouslySetInnerHTML","title","market","CardSubtitle","tag","Col","body","NoContentFound","HeadingLoader","DetailsLoader","nextProps","prevState","Component","connectedTermsAndConditions","connect","_state$termsAndCondit","termsAndCondition","tncError"],"mappings":"2OAKMA,EAASC,cAsBf,IAIeC,EAJqB,CAClCC,sBArBF,SAA+BC,EAAUC,GAOvC,OAAQ,SAACC,GACPA,EAAS,CAAEC,KAAM,2BACjBC,IAAMC,IAAN,GAAAC,OAHI,6BAGJ,iBAAiCV,GAC9BW,KAAK,SAACC,GACLN,EAAS,CAAEC,KAAM,iCAAkCM,QAASD,EAASE,SAEtEC,MAAM,SAACC,GACNV,EAAS,CAAEC,KAAM,iCAAkCM,QAASG,EAAMJ,WAClEN,EAAS,CAAEC,KAAM,YAAaM,QAASG,sDCCzCC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXZ,KAAMI,EAAMJ,KACZa,QAAS,EACTC,IAAK,GAGPT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACpBA,EAAKa,4BAA8Bb,EAAKa,4BAA4BF,KAAjCV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KATlBA,mFAajB,IAAMc,EAASC,IAAYC,MAAMb,KAAKJ,MAAMkB,SAASC,QAC7CV,EAA2BM,EAA3BN,QAASC,EAAkBK,EAAlBL,IAAKxB,EAAa6B,EAAb7B,SAClBuB,GACFL,KAAKgB,SAAS,CACZX,QAASA,EACTb,KAAMQ,KAAKJ,MAAMqB,IACjBX,IAAKA,IAITY,cACAlB,KAAKJ,MAAMf,sBAAsByB,EAAKD,EAASvB,wCAcpCU,GACX,MAAO,CAAE2B,OAAQ3B,yDAGW,IAAA4B,EACapB,KAAKJ,MAAtCqB,EADoBG,EACpBH,IAAKI,EADeD,EACfC,YAEb,GAH4BD,EACFE,WAEV,CACd,GAAIL,GAAsB,IAAfA,EAAIM,OACb,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAaC,wBAAyB7B,KAAKO,aAAaU,EAAIa,SACzEb,EAAIc,QACHP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAcC,IAAI,KAAKL,UAAU,2BAA2BX,EAAIc,QAElEP,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKN,UAAU,cAAcC,wBAAyB7B,KAAKO,aAAaU,EAAIkB,SAI7E,GAAIlB,GAAsB,IAAfA,EAAIM,OAClB,OAAOa,mBAGN,GAAIf,EACP,OACEG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACW,EAAA,EAAD,MACAb,EAAAC,EAAAC,cAACY,EAAA,EAAD,wCAON,OACEd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8BACZ5B,KAAKU,kFA/CoB6B,EAAWC,GACzC,IAAIpC,EAAQoC,EACZ,OAAIpC,GAASmC,EAAUjB,YAAgC,OAAlBiB,EAAUtB,IACrC,CACNA,IAAKsB,EAAUtB,KAGZb,SAnCsBqC,aAuFjC,IAMMC,EAA8BC,YAZpC,SAAyBvC,GAAO,IAAAwC,EACqBxC,EAAMyC,kBAEzD,MAAO,CAAE5B,IAHqB2B,EACtB3B,IAEM6B,SAHgBF,EACjBE,SAEWzB,YAHMuB,EACPvB,YAEcC,WAHPsB,EACMtB,aAKX,SAACtC,GAC1B,MAAO,CACLH,sBAAuB,SAACC,EAASC,GAAV,OAAsBC,EAASJ,EAA4BC,sBAAsBC,EAASC,OAIjF4D,CAA6ChD,GAElE+C","file":"static/js/TermsAndConditions.dd6c6de1.chunk.js","sourcesContent":["import axios from 'axios';\nimport { getAuthorization } from '../../helpers/authorization';\n// Enable when global terms and privacy are required\n// import { isLoggedIn } from '../../helpers/authorization';\n\nconst config = getAuthorization();\n\nfunction getTermsAndConditions(language, country) {\n  /*\n  // Enable when global terms and privacy are required\n  // const loggedIn = isLoggedIn()\n  // let url = loggedIn ? `/api/v1/termsAndConditions` : `/api/v1/globalTermsAndCondition`;\n  */\n let url = `/api/v1/termsAndConditions`;\n  return ((dispatch) => {\n    dispatch({ type: 'FETCH_TERMS_CONDITIONS' });\n    axios.get(`${url}?_format=json`, config)\n      .then((response) => {\n        dispatch({ type: 'FETCH_TERMS_CONDITIONS_SUCCESS', payload: response.data });\n      })\n      .catch((error) => {\n        dispatch({ type: 'FETCH_TERMS_CONDITIONS_FAILURE', payload: error.response });\n        dispatch({ type: \"ADD_ERROR\", payload: error });\n      });\n  });\n}\n\nconst getTermsAndConditionsAction = {\n  getTermsAndConditions,\n};\n\nexport default getTermsAndConditionsAction;\n","/*\n  provide terms and condition.\n\n  Redux Store Props:\n    tnc: <Object> data for tnc.\n    fetchingtnc: <Boolean> flag to specify if api is fetching tnc,\n    fetchedtnc: <Boolean> flag to specify if api has fetched tnc,\n    error: <String/ANY> a message from api detailing about error encountered.\n*/\n/* Import Core Libraries */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Col, CardSubtitle } from 'reactstrap';\nimport queryString from 'query-string';\n\n/* Import Custom Libraries */\nimport getTermsAndConditionsAction from './termsAndConditions.actions';\nimport { NoContentFound } from '../../helpers/error';\nimport HeadingLoader from '../Loaders/HeadingLoader';\nimport DetailsLoader from '../Loaders/DetailsLoader';\nimport '../../../sass/components/static-content.scss';\nimport {removeDrupalToolbar} from '../../helpers/utils';\n\nclass TermsAndConditions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: props.data,\n      preview: 0,\n      nid: 0\n    };\n\n    this.createMarkup = this.createMarkup.bind(this);\n    this.getRenderTermsAndConditions = this.getRenderTermsAndConditions.bind(this);\n  }\n\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search);\n    const { preview, nid, language } = parsed;\n    if (preview) {\n      this.setState({\n        preview: preview,\n        data: this.props.tnc,\n        nid: nid\n      })\n    }\n\n    removeDrupalToolbar();\n    this.props.getTermsAndConditions(nid, preview, language);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let state = prevState;\n    if (state && nextProps.fetchedTnc && nextProps.tnc !== null) {\n      return ({\n        tnc: nextProps.tnc,\n      });\n    }\n    return state;\n  }\n\n\n  createMarkup(data) {\n    return { __html: data };\n  }\n\n  getRenderTermsAndConditions() {\n    const { tnc, fetchingTnc, fetchedTnc } = this.props;\n\n    if (fetchedTnc) {\n      if (tnc && tnc.length !== 0) {\n        return (\n          <>\n            <h1 className=\"page-title\" dangerouslySetInnerHTML={this.createMarkup(tnc.title)}></h1>\n            {tnc.market &&\n              <CardSubtitle tag='h3' className=\"brand-title text-center\">{tnc.market}</CardSubtitle>\n            }\n            <Col className=\"description\" dangerouslySetInnerHTML={this.createMarkup(tnc.body)}></Col>\n          </>\n        )\n      }\n      else if (tnc && tnc.length === 0) {\n        return NoContentFound();\n      }\n    }\n    else if (fetchingTnc) {\n      return (\n        <>\n          <HeadingLoader/>\n          <DetailsLoader/>\n        </>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"tnc-wrapper static-content\">\n        {this.getRenderTermsAndConditions()}\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { tnc, tncError, fetchingTnc, fetchedTnc } = state.termsAndCondition;\n\n  return { tnc, tncError, fetchingTnc, fetchedTnc }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getTermsAndConditions: (language,country) => dispatch(getTermsAndConditionsAction.getTermsAndConditions(language,country)),\n  }\n}\n\nconst connectedTermsAndConditions = connect(mapStateToProps, mapDispatchToProps)(TermsAndConditions);\n\nexport default connectedTermsAndConditions;"],"sourceRoot":""}